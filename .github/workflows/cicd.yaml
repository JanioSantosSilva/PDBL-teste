name: CI/CD Workflow

on:
  workflow_dispatch:
  push:
      branches:
        - main



jobs:
  build:
    runs-on: ubuntu-latest


    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    
    - name: Checar nome do Centro de Custo
      id: checar_nome
      run: |
        REPO_NAME="${{ github.repository }}"
    
        # Extrair a parte relevante do nome do repositório
        REPO_NAME=$(echo "$REPO_NAME" | cut -d'/' -f2)
    
        # Verificar se há um nome de 4 caracteres ou contendo 'AWB'
        NOME_ENCONTRADO=$(echo "$REPO_NAME" | tr '-' '\n' | grep -E '^[a-zA-Z0-9]{4}$' || echo "$REPO_NAME" | grep -o 'AWB[^/]*')
    
        if [[ -n "$NOME_ENCONTRADO" ]]; then
          DIST_PROPERTIES=($(find . -name "*.properties" -exec grep -h '^dist' {} +))
          echo "Todas as propriedades dist foram armazenadas no array:"
          printf "%s\n" "${DIST_PROPERTIES[@]}"
          for property in "${DIST_PROPERTIES[@]}"; do
             echo "Propriedade dist: $property"
            done
           else
         echo "Nenhum nome de centro de custo encontrado."
        fi
    #- name: Checar name centro de Custo
    #  id: checar_nome
    #  run: |
    #    REPO_NAME="${{ github.repository }}" 
    #    
    #    # Extract the parts of the repository name
    #    IFS='/' read -r -a PARTS <<< "$REP O_NAME"
    #    REPO_NAME=${PARTS[1]} 
    #    
    #    FOUR_CHAR_NAME=$(echo "$REPO_NAME" | tr '-' '\n' | grep -E '^[a-zA-Z0-9]{4}$')
    #    if [[ -n "$FOUR_CHAR_NAME" ]]; then
    #     echo "Nome Centro de Custo: $FOUR_CHAR_NAME"
    #     NOME_ENCONTRADO=$FOUR_CHAR_NAME
    #    fi
    #    
    #         REPO_NAME | grep -o 'AWB[^/]*')
    #       echo "Nome contendo 'AWB' encontrado: $AWB_PART"
    #       NOME_ENCONTRADO=$AWB_PART
    #    fi
#
    #    if [[ -n "$NOME_ENCONTRADO" ]]; then
    #      LOWERCASE_NAME=$(echo "$NOME_ENCONTRADO" | tr '[:upper:]' '[:lower:]')
    #      echo "Buscando arquivo properties no repositório com prefixo: $LOWERCASE_NAME"
    #      for FILE in $(find . -name "${LOWERCASE_NAME}-*.properties"); do
    #        echo "Arquivo encontrado: $FILE"
    #
    #         while IFS='=' read -r key value; do
    #         if [[ $key == dist* ]]; then
    #            echo "Exporting property: ${key}=${value}"
    #           echo "${key}=${value}" >> $GITHUB_ENV
    #         fi
    #       done < "$FILE"
    #      done
    #  
    #      echo "All dist properties have been exported."
    #    else
    #     echo "Nenhum nome de centro de custo encontrado."
    #    fi
#
    #
#

    # 3. Leitura do arquivo dist.properties e criação de array
    #- name: Ler dist.properties e criar array de destinos
    #  id: ler_properties
    #  run: |
    #    # Inicializar array de destinos
    #    DESTINOS=()
    #
    #    # Ler todos os valores que começam com 'jar.dist'
    #    while IFS='=' read -r key value; do
    #      if [[ $key == jar.dist* ]]; then
    #        DESTINOS+=("$value")
    #      fi
    #    done < dist.properties
    #
    #    # Exibir o array de destinos
    #    echo "Destinos: ${DESTINOS[@]}"
    #
    #    # 4. Upload do artefato JAR para múltiplos destinos no Nexus

    #- name: Upload do artefato JAR no Nexus
    #  run: |
    #    # Convertendo a string de volta para um array
    #    IFS=' ' read -r -a DESTINOS <<< "${{ env.DESTINOS }}"
    #    
    #    # Iterando sobre cada destino e fazendo o upload
    #    for DESTINO in "${DESTINOS[@]}"; do
    #      echo "Fazendo upload para: $DESTINO"
    #      
    #      # Upload do artefato para o Nexus
    #      curl -u ${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }} \
    #        --upload-file target/$JAR_NAME \
    #        $NEXUS_URL/$DESTINO/$JAR_NAME
    #    done

    # 5. Verificação da publicação no Nexus
    - name: Ler dist.properties e fazer upload do artefato JAR no Nexus
      run: |
        # Inicializar array de destinos
        DESTINOS=()
    
        # Ler todos os valores que começam com 'jar.dist'
        while IFS='=' read -r key value; do
          if [[ $key == dist* ]]; then
            DESTINOS+=("$value")
          fi
        done < dist.properties
    
        # Exibir o array de destinos
        echo "Destinos: ${DESTINOS[@]}"
    
        # Fazer upload do artefato JAR para múltiplos destinos no Nexus
        for DESTINO in "${DESTINOS[@]}"; do
          echo "Fazendo upload para: $DESTINO"
          







#teste

        # # Upload do artefato para o Nexus
        #curl -u ${{ secrets.NEXUS_USERNAME }}:${{ secrets.NEXUS_PASSWORD }} \
        #   --upload-file target/$JAR_NAME \
        #    $NEXUS_URL/$DESTINO/$JAR_NAME
        #done